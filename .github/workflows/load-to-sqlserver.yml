name: Load CSV to RDS SQL Server


on:
  workflow_run:
    workflows: ["Deploy Glue Pipeline"]
    types: [completed]

jobs:
  load-csv:
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    runs-on: ubuntu-latest
    env:
      AWS_REGION: us-east-1
      DB_INSTANCE_ID: gp-sqlserver-dev
      SECRET_ID: connection_parameters_sqlserver-dev   # your Secrets Manager id

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      # Install ODBC BEFORE pyodbc
      - name: Install Microsoft ODBC Driver 17 for SQL Server
        run: |
          curl https://packages.microsoft.com/keys/microsoft.asc | sudo apt-key add -
          sudo apt-get update
          sudo apt-get install -y curl gnupg apt-transport-https
          sudo curl -sSL https://packages.microsoft.com/config/ubuntu/22.04/prod.list \
            | sudo tee /etc/apt/sources.list.d/mssql-release.list
          sudo apt-get update
          sudo ACCEPT_EULA=Y apt-get install -y msodbcsql17 unixodbc-dev
          odbcinst -q -d -n "ODBC Driver 17 for SQL Server"

      - name: Install Python deps
        run: |
          python -m pip install --upgrade pip
          pip install pandas boto3 pyodbc pyyaml

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Get runner IP
        id: ip
        run: echo "IP=$(curl -s https://checkip.amazonaws.com)/32" >> "$GITHUB_OUTPUT"

      - name: Get RDS security group id
        id: sg
        run: |
          SG=$(aws rds describe-db-instances \
            --db-instance-identifier "$DB_INSTANCE_ID" \
            --query "DBInstances[0].VpcSecurityGroups[0].VpcSecurityGroupId" \
            --output text)
          echo "SG=$SG" >> "$GITHUB_OUTPUT"

      - name: Allow 1433 from runner
        if: always()
        run: |
          aws ec2 authorize-security-group-ingress \
            --group-id "${{ steps.sg.outputs.SG }}" \
            --protocol tcp --port 1433 --cidr "${{ steps.ip.outputs.IP }}" \
          || echo "Ingress may already exist; continuing"

      - name: Test DB connectivity
        env:
          SECRET_ID: ${{ env.SECRET_ID }}
          AWS_REGION: ${{ env.AWS_REGION }}
        run: |
          python - <<'PY'
          import os, json, boto3, pyodbc
          s = json.loads(boto3.client("secretsmanager", region_name=os.getenv("AWS_REGION"))
                         .get_secret_value(SecretId=os.getenv("SECRET_ID"))["SecretString"])
          cs = ( "DRIVER={ODBC Driver 17 for SQL Server};"
                 f"SERVER={s['host']},{s.get('port',1433)};"
                 f"DATABASE={s.get('database') or s.get('dbname','master')};"
                 f"UID={s['username']};PWD={s['password']};" )
          cn = pyodbc.connect(cs, timeout=10)
          cn.cursor().execute("SELECT 1")
          cn.close()
          print("Connectivity OK")
          PY

      - name: Run loader script
        env:
          SECRET_ID: ${{ env.SECRET_ID }}
          AWS_REGION: ${{ env.AWS_REGION }}
        run: python rds/load_to_sqlserver.py

      - name: Revoke 1433 from runner
        if: always()
        run: |
          aws ec2 revoke-security-group-ingress \
            --group-id "${{ steps.sg.outputs.SG }}" \
            --protocol tcp --port 1433 --cidr "${{ steps.ip.outputs.IP }}" \
          || echo "Revoke may already be gone; continuing"
